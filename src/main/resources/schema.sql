-- Создание таблицы users
CREATE TABLE IF NOT EXISTS users (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	email varchar NOT NULL,
	login varchar NOT NULL,
	name varchar NOT NULL,
	birthday timestamp NOT NULL,
	CONSTRAINT not_blank CHECK (email <> '' AND login <> '')
);

-- Создание таблицы friends
CREATE TABLE IF NOT EXISTS friends (
	user_id INTEGER REFERENCES users (id),
	friend_id INTEGER REFERENCES users (id),
	status boolean NOT NULL,
	CONSTRAINT pk_friends PRIMARY KEY(user_id, friend_id)
);

-- Создание таблицы rating_MPA
CREATE TABLE IF NOT EXISTS rating_MPA (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar NOT NULL,
	CONSTRAINT rating_not_blank CHECK (name <> '')
);

-- Создание таблицы films
CREATE TABLE IF NOT EXISTS films (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar NOT NULL,
	description varchar(200),
	release_date timestamp NOT NULL,
	duration INTEGER NOT NULL,
	likes INTEGER NOT NULL DEFAULT 0,
	rating_id INTEGER REFERENCES rating_MPA (id),
	CONSTRAINT name_not_blank CHECK (name <> ''),
	CONSTRAINT positive CHECK (duration > 0 AND likes > -1)
);

-- Создание таблицы film_likes
CREATE TABLE IF NOT EXISTS film_likes (
	film_id INTEGER REFERENCES films (id),
	user_id INTEGER REFERENCES users (id),
	CONSTRAINT pk_film_likes PRIMARY KEY(film_id, user_id)

);

--Создание таблицы genres
CREATE TABLE IF NOT EXISTS genres (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar UNIQUE NOT NULL,
	CONSTRAINT genre_name_not_blank CHECK (name <> '')
);

-- Создание таблицы film_genres
CREATE TABLE IF NOT EXISTS film_genres (
	film_id INTEGER REFERENCES films (id),
	genre_id INTEGER REFERENCES genres (id),
	CONSTRAINT pk_film_genres PRIMARY KEY(film_id, genre_id)
);